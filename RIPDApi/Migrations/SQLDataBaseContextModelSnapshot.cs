// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RIPDApi.Data;

#nullable disable

namespace RIPDApi.Migrations
{
    [DbContext(typeof(SQLDataBaseContext))]
    partial class SQLDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RIPDShared.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RIPDShared.Models.Diary", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnerId");

                    b.ToTable("Diaries");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_BodyMetric", b =>
                {
                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryNr"));

                    b.Property<DateTime>("Acted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("DiaryId", "EntryNr");

                    b.ToTable("BodyMetrics");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Food", b =>
                {
                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryNr"));

                    b.Property<DateTime>("Acted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiaryId", "EntryNr");

                    b.HasIndex("FoodId");

                    b.ToTable("DiaryFoods");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Run", b =>
                {
                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryNr"));

                    b.Property<DateTime>("Acted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<string>("MongoDBId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaryId", "EntryNr");

                    b.ToTable("DiaryRuns");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Workout", b =>
                {
                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryNr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryNr"));

                    b.Property<DateTime>("Acted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiaryId", "EntryNr");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DiaryWorkouts");
                });

            modelBuilder.Entity("RIPDShared.Models.FitnessTarget", b =>
                {
                    b.Property<Guid>("DiaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryNr")
                        .HasColumnType("int");

                    b.Property<DateTime>("Acted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BodyMetricUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalBodyMetricEntryNr")
                        .HasColumnType("int");

                    b.Property<int>("StartBodyMetricEntryNr")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DiaryId", "EntryNr");

                    b.HasIndex("BodyMetricUser", "GoalBodyMetricEntryNr");

                    b.HasIndex("BodyMetricUser", "StartBodyMetricEntryNr");

                    b.ToTable("FitnessTargets");
                });

            modelBuilder.Entity("RIPDShared.Models.Food", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Alcohol")
                        .HasColumnType("real");

                    b.Property<float?>("AlphaCarotin")
                        .HasColumnType("real");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("BetaCarotin")
                        .HasColumnType("real");

                    b.Property<float?>("BetaCryptoxanthin")
                        .HasColumnType("real");

                    b.Property<float?>("Calcium")
                        .HasColumnType("real");

                    b.Property<float?>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<float?>("Cholesterol")
                        .HasColumnType("real");

                    b.Property<float?>("Choline")
                        .HasColumnType("real");

                    b.Property<Guid?>("ContributerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Copper")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Energy")
                        .HasColumnType("real");

                    b.Property<float?>("Fat")
                        .HasColumnType("real");

                    b.Property<float?>("FattyAcidsMono")
                        .HasColumnType("real");

                    b.Property<float?>("FattyAcidsPoly")
                        .HasColumnType("real");

                    b.Property<float?>("FattyAcidsSaturated")
                        .HasColumnType("real");

                    b.Property<float?>("Fiber")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Iron")
                        .HasColumnType("real");

                    b.Property<float?>("LutZea")
                        .HasColumnType("real");

                    b.Property<float?>("Lycopene")
                        .HasColumnType("real");

                    b.Property<float?>("Magnesium")
                        .HasColumnType("real");

                    b.Property<float?>("Manganese")
                        .HasColumnType("real");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Phosphorus")
                        .HasColumnType("real");

                    b.Property<float?>("Potassium")
                        .HasColumnType("real");

                    b.Property<float?>("Protein")
                        .HasColumnType("real");

                    b.Property<float?>("Retinol")
                        .HasColumnType("real");

                    b.Property<float?>("Selenium")
                        .HasColumnType("real");

                    b.Property<float?>("Sodium")
                        .HasColumnType("real");

                    b.Property<float?>("Sugar")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float?>("VitaminA1")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB1")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB12")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB2")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB3")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB5")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB6")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB9")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminC")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminD")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminE")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminK")
                        .HasColumnType("real");

                    b.Property<float?>("Water")
                        .HasColumnType("real");

                    b.Property<float?>("Zinc")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ContributerId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("RIPDShared.Models.Workout", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContributerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Energy")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContributerId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIPDShared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RIPDShared.Models.Diary", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", "Owner")
                        .WithOne("Diary")
                        .HasForeignKey("RIPDShared.Models.Diary", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_BodyMetric", b =>
                {
                    b.HasOne("RIPDShared.Models.Diary", "Diary")
                        .WithMany("BodyMetrics")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Food", b =>
                {
                    b.HasOne("RIPDShared.Models.Diary", "Diary")
                        .WithMany("FoodEntries")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIPDShared.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Diary");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Run", b =>
                {
                    b.HasOne("RIPDShared.Models.Diary", "Diary")
                        .WithMany("RunEntries")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diary");
                });

            modelBuilder.Entity("RIPDShared.Models.DiaryEntry_Workout", b =>
                {
                    b.HasOne("RIPDShared.Models.Diary", "Diary")
                        .WithMany("WorkoutEntries")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIPDShared.Models.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Diary");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("RIPDShared.Models.FitnessTarget", b =>
                {
                    b.HasOne("RIPDShared.Models.Diary", "Diary")
                        .WithMany("FitnessTargets")
                        .HasForeignKey("DiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RIPDShared.Models.DiaryEntry_BodyMetric", "GoalBodyMetric")
                        .WithMany()
                        .HasForeignKey("BodyMetricUser", "GoalBodyMetricEntryNr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RIPDShared.Models.DiaryEntry_BodyMetric", "StartBodyMetric")
                        .WithMany()
                        .HasForeignKey("BodyMetricUser", "StartBodyMetricEntryNr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Diary");

                    b.Navigation("GoalBodyMetric");

                    b.Navigation("StartBodyMetric");
                });

            modelBuilder.Entity("RIPDShared.Models.Food", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", "Contributer")
                        .WithMany("ContributedFoods")
                        .HasForeignKey("ContributerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RIPDShared.Models.AppUser", "Manufacturer")
                        .WithMany("ManufacturedFoods")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contributer");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("RIPDShared.Models.Workout", b =>
                {
                    b.HasOne("RIPDShared.Models.AppUser", "Contributer")
                        .WithMany("ContributedWorkouts")
                        .HasForeignKey("ContributerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contributer");
                });

            modelBuilder.Entity("RIPDShared.Models.AppUser", b =>
                {
                    b.Navigation("ContributedFoods");

                    b.Navigation("ContributedWorkouts");

                    b.Navigation("Diary");

                    b.Navigation("ManufacturedFoods");
                });

            modelBuilder.Entity("RIPDShared.Models.Diary", b =>
                {
                    b.Navigation("BodyMetrics");

                    b.Navigation("FitnessTargets");

                    b.Navigation("FoodEntries");

                    b.Navigation("RunEntries");

                    b.Navigation("WorkoutEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
